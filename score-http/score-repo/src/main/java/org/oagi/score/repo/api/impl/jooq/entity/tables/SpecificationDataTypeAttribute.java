/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SpecificationDataTypeAttributeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpecificationDataTypeAttribute extends TableImpl<SpecificationDataTypeAttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>oagi.specification_data_type_attribute</code>
     */
    public static final SpecificationDataTypeAttribute SPECIFICATION_DATA_TYPE_ATTRIBUTE = new SpecificationDataTypeAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecificationDataTypeAttributeRecord> getRecordType() {
        return SpecificationDataTypeAttributeRecord.class;
    }

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.dt_attribute_id</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, Long> DT_ATTRIBUTE_ID = createField(DSL.name("dt_attribute_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.dt_attribute_name</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, String> DT_ATTRIBUTE_NAME = createField(DSL.name("dt_attribute_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.definition</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.min_cardinality</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, Integer> MIN_CARDINALITY = createField(DSL.name("min_cardinality"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.max_cardinality</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, Integer> MAX_CARDINALITY = createField(DSL.name("max_cardinality"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.from_data_type_id</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, Long> FROM_DATA_TYPE_ID = createField(DSL.name("from_data_type_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_data_type_attribute.to_data_type_id</code>.
     */
    public final TableField<SpecificationDataTypeAttributeRecord, Long> TO_DATA_TYPE_ID = createField(DSL.name("to_data_type_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SpecificationDataTypeAttribute(Name alias, Table<SpecificationDataTypeAttributeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpecificationDataTypeAttribute(Name alias, Table<SpecificationDataTypeAttributeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.specification_data_type_attribute</code>
     * table reference
     */
    public SpecificationDataTypeAttribute(String alias) {
        this(DSL.name(alias), SPECIFICATION_DATA_TYPE_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>oagi.specification_data_type_attribute</code>
     * table reference
     */
    public SpecificationDataTypeAttribute(Name alias) {
        this(alias, SPECIFICATION_DATA_TYPE_ATTRIBUTE);
    }

    /**
     * Create a <code>oagi.specification_data_type_attribute</code> table
     * reference
     */
    public SpecificationDataTypeAttribute() {
        this(DSL.name("specification_data_type_attribute"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SpecificationDataTypeAttributeRecord, Long> getIdentity() {
        return (Identity<SpecificationDataTypeAttributeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpecificationDataTypeAttributeRecord> getPrimaryKey() {
        return Keys.KEY_SPECIFICATION_DATA_TYPE_ATTRIBUTE_PRIMARY;
    }

    @Override
    public SpecificationDataTypeAttribute as(String alias) {
        return new SpecificationDataTypeAttribute(DSL.name(alias), this);
    }

    @Override
    public SpecificationDataTypeAttribute as(Name alias) {
        return new SpecificationDataTypeAttribute(alias, this);
    }

    @Override
    public SpecificationDataTypeAttribute as(Table<?> alias) {
        return new SpecificationDataTypeAttribute(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationDataTypeAttribute rename(String name) {
        return new SpecificationDataTypeAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationDataTypeAttribute rename(Name name) {
        return new SpecificationDataTypeAttribute(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationDataTypeAttribute rename(Table<?> name) {
        return new SpecificationDataTypeAttribute(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute where(Condition condition) {
        return new SpecificationDataTypeAttribute(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationDataTypeAttribute where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationDataTypeAttribute where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationDataTypeAttribute where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationDataTypeAttribute where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationDataTypeAttribute whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
