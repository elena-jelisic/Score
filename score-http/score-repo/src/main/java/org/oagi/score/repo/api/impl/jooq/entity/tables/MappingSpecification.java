/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieGapAnalysisResults.BbieGapAnalysisResultsPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.MappingSpecificationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MappingSpecification extends TableImpl<MappingSpecificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.mapping_specification</code>
     */
    public static final MappingSpecification MAPPING_SPECIFICATION = new MappingSpecification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MappingSpecificationRecord> getRecordType() {
        return MappingSpecificationRecord.class;
    }

    /**
     * The column
     * <code>oagi.mapping_specification.mapping_specification_id</code>.
     */
    public final TableField<MappingSpecificationRecord, Long> MAPPING_SPECIFICATION_ID = createField(DSL.name("mapping_specification_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.mapping_specification.mapping_specification</code>.
     */
    public final TableField<MappingSpecificationRecord, String> MAPPING_SPECIFICATION_ = createField(DSL.name("mapping_specification"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    private MappingSpecification(Name alias, Table<MappingSpecificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MappingSpecification(Name alias, Table<MappingSpecificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.mapping_specification</code> table reference
     */
    public MappingSpecification(String alias) {
        this(DSL.name(alias), MAPPING_SPECIFICATION);
    }

    /**
     * Create an aliased <code>oagi.mapping_specification</code> table reference
     */
    public MappingSpecification(Name alias) {
        this(alias, MAPPING_SPECIFICATION);
    }

    /**
     * Create a <code>oagi.mapping_specification</code> table reference
     */
    public MappingSpecification() {
        this(DSL.name("mapping_specification"), null);
    }

    public <O extends Record> MappingSpecification(Table<O> path, ForeignKey<O, MappingSpecificationRecord> childPath, InverseForeignKey<O, MappingSpecificationRecord> parentPath) {
        super(path, childPath, parentPath, MAPPING_SPECIFICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MappingSpecificationPath extends MappingSpecification implements Path<MappingSpecificationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MappingSpecificationPath(Table<O> path, ForeignKey<O, MappingSpecificationRecord> childPath, InverseForeignKey<O, MappingSpecificationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MappingSpecificationPath(Name alias, Table<MappingSpecificationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MappingSpecificationPath as(String alias) {
            return new MappingSpecificationPath(DSL.name(alias), this);
        }

        @Override
        public MappingSpecificationPath as(Name alias) {
            return new MappingSpecificationPath(alias, this);
        }

        @Override
        public MappingSpecificationPath as(Table<?> alias) {
            return new MappingSpecificationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<MappingSpecificationRecord, Long> getIdentity() {
        return (Identity<MappingSpecificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MappingSpecificationRecord> getPrimaryKey() {
        return Keys.KEY_MAPPING_SPECIFICATION_PRIMARY;
    }

    private transient BbieGapAnalysisResultsPath _bbieGapAnalysisResults;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bbie_gap_analysis_results</code> table
     */
    public BbieGapAnalysisResultsPath bbieGapAnalysisResults() {
        if (_bbieGapAnalysisResults == null)
            _bbieGapAnalysisResults = new BbieGapAnalysisResultsPath(this, null, Keys.FKBBIE_GAP_A747300.getInverseKey());

        return _bbieGapAnalysisResults;
    }

    @Override
    public MappingSpecification as(String alias) {
        return new MappingSpecification(DSL.name(alias), this);
    }

    @Override
    public MappingSpecification as(Name alias) {
        return new MappingSpecification(alias, this);
    }

    @Override
    public MappingSpecification as(Table<?> alias) {
        return new MappingSpecification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MappingSpecification rename(String name) {
        return new MappingSpecification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappingSpecification rename(Name name) {
        return new MappingSpecification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MappingSpecification rename(Table<?> name) {
        return new MappingSpecification(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification where(Condition condition) {
        return new MappingSpecification(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappingSpecification where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappingSpecification where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappingSpecification where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MappingSpecification where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MappingSpecification whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
