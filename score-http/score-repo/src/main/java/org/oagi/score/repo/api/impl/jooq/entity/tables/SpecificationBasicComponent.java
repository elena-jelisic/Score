/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Indexes;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bcc.BccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.CcGapAnalysisResultCode.CcGapAnalysisResultCodePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Specification.SpecificationPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationAggregateComponent.SpecificationAggregateComponentPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationDataType.SpecificationDataTypePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.StatusCode.StatusCodePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SpecificationBasicComponentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpecificationBasicComponent extends TableImpl<SpecificationBasicComponentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.specification_basic_component</code>
     */
    public static final SpecificationBasicComponent SPECIFICATION_BASIC_COMPONENT = new SpecificationBasicComponent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecificationBasicComponentRecord> getRecordType() {
        return SpecificationBasicComponentRecord.class;
    }

    /**
     * The column <code>oagi.specification_basic_component.component_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> COMPONENT_ID = createField(DSL.name("component_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.component_name</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, String> COMPONENT_NAME = createField(DSL.name("component_name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>oagi.specification_basic_component.definition</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, String> DEFINITION = createField(DSL.name("definition"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.min_cardinality</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Integer> MIN_CARDINALITY = createField(DSL.name("min_cardinality"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.max_cardinality</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Integer> MAX_CARDINALITY = createField(DSL.name("max_cardinality"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.value_constraint</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, String> VALUE_CONSTRAINT = createField(DSL.name("value_constraint"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.status_code_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> STATUS_CODE_ID = createField(DSL.name("status_code_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.aggregate_component_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> AGGREGATE_COMPONENT_ID = createField(DSL.name("aggregate_component_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.gap_analysis_code_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> GAP_ANALYSIS_CODE_ID = createField(DSL.name("gap_analysis_code_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>oagi.specification_basic_component.bcc_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, ULong> BCC_ID = createField(DSL.name("bcc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>oagi.specification_basic_component.data_type_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> DATA_TYPE_ID = createField(DSL.name("data_type_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.specification_basic_component.is_approved</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Byte> IS_APPROVED = createField(DSL.name("is_approved"), SQLDataType.TINYINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>oagi.specification_basic_component.specification_id</code>.
     */
    public final TableField<SpecificationBasicComponentRecord, Long> SPECIFICATION_ID = createField(DSL.name("specification_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SpecificationBasicComponent(Name alias, Table<SpecificationBasicComponentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpecificationBasicComponent(Name alias, Table<SpecificationBasicComponentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.specification_basic_component</code> table
     * reference
     */
    public SpecificationBasicComponent(String alias) {
        this(DSL.name(alias), SPECIFICATION_BASIC_COMPONENT);
    }

    /**
     * Create an aliased <code>oagi.specification_basic_component</code> table
     * reference
     */
    public SpecificationBasicComponent(Name alias) {
        this(alias, SPECIFICATION_BASIC_COMPONENT);
    }

    /**
     * Create a <code>oagi.specification_basic_component</code> table reference
     */
    public SpecificationBasicComponent() {
        this(DSL.name("specification_basic_component"), null);
    }

    public <O extends Record> SpecificationBasicComponent(Table<O> path, ForeignKey<O, SpecificationBasicComponentRecord> childPath, InverseForeignKey<O, SpecificationBasicComponentRecord> parentPath) {
        super(path, childPath, parentPath, SPECIFICATION_BASIC_COMPONENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpecificationBasicComponentPath extends SpecificationBasicComponent implements Path<SpecificationBasicComponentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpecificationBasicComponentPath(Table<O> path, ForeignKey<O, SpecificationBasicComponentRecord> childPath, InverseForeignKey<O, SpecificationBasicComponentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpecificationBasicComponentPath(Name alias, Table<SpecificationBasicComponentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpecificationBasicComponentPath as(String alias) {
            return new SpecificationBasicComponentPath(DSL.name(alias), this);
        }

        @Override
        public SpecificationBasicComponentPath as(Name alias) {
            return new SpecificationBasicComponentPath(alias, this);
        }

        @Override
        public SpecificationBasicComponentPath as(Table<?> alias) {
            return new SpecificationBasicComponentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SPECIFICATION_BASIC_COMPONENT_FKSPECIFICAT993501_IDX);
    }

    @Override
    public Identity<SpecificationBasicComponentRecord, Long> getIdentity() {
        return (Identity<SpecificationBasicComponentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpecificationBasicComponentRecord> getPrimaryKey() {
        return Keys.KEY_SPECIFICATION_BASIC_COMPONENT_PRIMARY;
    }

    @Override
    public List<ForeignKey<SpecificationBasicComponentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSPECIFICAT993500, Keys.FKSPECIFICAT950731, Keys.FKSPECIFICAT591284, Keys.FKSPECIFICAT993501, Keys.FKSPECIFICAT559853, Keys.FKSPECIFICAT468600);
    }

    private transient StatusCodePath _statusCode;

    /**
     * Get the implicit join path to the <code>oagi.status_code</code> table.
     */
    public StatusCodePath statusCode() {
        if (_statusCode == null)
            _statusCode = new StatusCodePath(this, Keys.FKSPECIFICAT993500, null);

        return _statusCode;
    }

    private transient SpecificationAggregateComponentPath _specificationAggregateComponent;

    /**
     * Get the implicit join path to the
     * <code>oagi.specification_aggregate_component</code> table.
     */
    public SpecificationAggregateComponentPath specificationAggregateComponent() {
        if (_specificationAggregateComponent == null)
            _specificationAggregateComponent = new SpecificationAggregateComponentPath(this, Keys.FKSPECIFICAT950731, null);

        return _specificationAggregateComponent;
    }

    private transient CcGapAnalysisResultCodePath _ccGapAnalysisResultCode;

    /**
     * Get the implicit join path to the
     * <code>oagi.cc_gap_analysis_result_code</code> table.
     */
    public CcGapAnalysisResultCodePath ccGapAnalysisResultCode() {
        if (_ccGapAnalysisResultCode == null)
            _ccGapAnalysisResultCode = new CcGapAnalysisResultCodePath(this, Keys.FKSPECIFICAT591284, null);

        return _ccGapAnalysisResultCode;
    }

    private transient BccPath _bcc;

    /**
     * Get the implicit join path to the <code>oagi.bcc</code> table.
     */
    public BccPath bcc() {
        if (_bcc == null)
            _bcc = new BccPath(this, Keys.FKSPECIFICAT993501, null);

        return _bcc;
    }

    private transient SpecificationDataTypePath _specificationDataType;

    /**
     * Get the implicit join path to the
     * <code>oagi.specification_data_type</code> table.
     */
    public SpecificationDataTypePath specificationDataType() {
        if (_specificationDataType == null)
            _specificationDataType = new SpecificationDataTypePath(this, Keys.FKSPECIFICAT559853, null);

        return _specificationDataType;
    }

    private transient SpecificationPath _specification;

    /**
     * Get the implicit join path to the <code>oagi.specification</code> table.
     */
    public SpecificationPath specification() {
        if (_specification == null)
            _specification = new SpecificationPath(this, Keys.FKSPECIFICAT468600, null);

        return _specification;
    }

    @Override
    public SpecificationBasicComponent as(String alias) {
        return new SpecificationBasicComponent(DSL.name(alias), this);
    }

    @Override
    public SpecificationBasicComponent as(Name alias) {
        return new SpecificationBasicComponent(alias, this);
    }

    @Override
    public SpecificationBasicComponent as(Table<?> alias) {
        return new SpecificationBasicComponent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationBasicComponent rename(String name) {
        return new SpecificationBasicComponent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationBasicComponent rename(Name name) {
        return new SpecificationBasicComponent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpecificationBasicComponent rename(Table<?> name) {
        return new SpecificationBasicComponent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent where(Condition condition) {
        return new SpecificationBasicComponent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationBasicComponent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationBasicComponent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationBasicComponent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpecificationBasicComponent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpecificationBasicComponent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
