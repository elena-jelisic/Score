/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.FlatBccView_2Record;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlatBccView_2 extends TableImpl<FlatBccView_2Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.flat_bcc_view_2</code>
     */
    public static final FlatBccView_2 FLAT_BCC_VIEW_2 = new FlatBccView_2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlatBccView_2Record> getRecordType() {
        return FlatBccView_2Record.class;
    }

    private FlatBccView_2(Name alias, Table<FlatBccView_2Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FlatBccView_2(Name alias, Table<FlatBccView_2Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `flat_bcc_view_2` as select `oagi`.`acc`.`object_class_term` AS `object_class_term`,case when `oagi`.`dt_sc`.`dt_sc_id` is null then concat(concat(`original`.`object_class_term`,'. '),`oagi`.`bccp`.`property_term`) else concat(concat(concat(concat(`original`.`object_class_term`,'. '),`oagi`.`bccp`.`property_term`),'. '),concat(concat(concat(concat(`oagi`.`dt_sc`.`object_class_term`,'. '),`oagi`.`dt_sc`.`property_term`),'. '),`oagi`.`dt_sc`.`representation_term`)) end AS `property`,`fb`.`super_bcc_id` AS `super_bcc_id` from (((((`oagi`.`flat_bcc` `fb` join `oagi`.`acc` on(`oagi`.`acc`.`acc_id` = `fb`.`acc_id`)) join `oagi`.`acc` `original` on(`original`.`acc_id` = `fb`.`original_acc_id`)) join `oagi`.`bcc` on(`fb`.`bcc_id` = `oagi`.`bcc`.`bcc_id`)) join `oagi`.`bccp` on(`oagi`.`bcc`.`to_bccp_id` = `oagi`.`bccp`.`bccp_id`)) left join `oagi`.`dt_sc` on(`fb`.`dt_sc_id` = `oagi`.`dt_sc`.`dt_sc_id`)) order by `fb`.`super_bcc_id`"), where);
    }

    /**
     * Create an aliased <code>oagi.flat_bcc_view_2</code> table reference
     */
    public FlatBccView_2(String alias) {
        this(DSL.name(alias), FLAT_BCC_VIEW_2);
    }

    /**
     * Create an aliased <code>oagi.flat_bcc_view_2</code> table reference
     */
    public FlatBccView_2(Name alias) {
        this(alias, FLAT_BCC_VIEW_2);
    }

    /**
     * Create a <code>oagi.flat_bcc_view_2</code> table reference
     */
    public FlatBccView_2() {
        this(DSL.name("flat_bcc_view_2"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public FlatBccView_2 as(String alias) {
        return new FlatBccView_2(DSL.name(alias), this);
    }

    @Override
    public FlatBccView_2 as(Name alias) {
        return new FlatBccView_2(alias, this);
    }

    @Override
    public FlatBccView_2 as(Table<?> alias) {
        return new FlatBccView_2(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView_2 rename(String name) {
        return new FlatBccView_2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView_2 rename(Name name) {
        return new FlatBccView_2(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView_2 rename(Table<?> name) {
        return new FlatBccView_2(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 where(Condition condition) {
        return new FlatBccView_2(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView_2 where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView_2 where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView_2 where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView_2 where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView_2 whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
