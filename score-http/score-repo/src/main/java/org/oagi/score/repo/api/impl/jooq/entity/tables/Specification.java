/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Release.ReleasePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Source.SourcePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Specification.SpecificationPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationAggregateComponent.SpecificationAggregateComponentPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationAssociationComponent.SpecificationAssociationComponentPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationBasicComponent.SpecificationBasicComponentPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationDataType.SpecificationDataTypePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SpecificationType.SpecificationTypePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SpecificationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Specification extends TableImpl<SpecificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.specification</code>
     */
    public static final Specification SPECIFICATION = new Specification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecificationRecord> getRecordType() {
        return SpecificationRecord.class;
    }

    /**
     * The column <code>oagi.specification.specification_id</code>.
     */
    public final TableField<SpecificationRecord, Long> SPECIFICATION_ID = createField(DSL.name("specification_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.specification.specification_type_id</code>.
     */
    public final TableField<SpecificationRecord, Long> SPECIFICATION_TYPE_ID = createField(DSL.name("specification_type_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.specification.based_specification_id</code>.
     */
    public final TableField<SpecificationRecord, Long> BASED_SPECIFICATION_ID = createField(DSL.name("based_specification_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.specification.source_id</code>.
     */
    public final TableField<SpecificationRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.specification.specification_name</code>.
     */
    public final TableField<SpecificationRecord, String> SPECIFICATION_NAME = createField(DSL.name("specification_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Specification(Name alias, Table<SpecificationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Specification(Name alias, Table<SpecificationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.specification</code> table reference
     */
    public Specification(String alias) {
        this(DSL.name(alias), SPECIFICATION);
    }

    /**
     * Create an aliased <code>oagi.specification</code> table reference
     */
    public Specification(Name alias) {
        this(alias, SPECIFICATION);
    }

    /**
     * Create a <code>oagi.specification</code> table reference
     */
    public Specification() {
        this(DSL.name("specification"), null);
    }

    public <O extends Record> Specification(Table<O> path, ForeignKey<O, SpecificationRecord> childPath, InverseForeignKey<O, SpecificationRecord> parentPath) {
        super(path, childPath, parentPath, SPECIFICATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpecificationPath extends Specification implements Path<SpecificationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpecificationPath(Table<O> path, ForeignKey<O, SpecificationRecord> childPath, InverseForeignKey<O, SpecificationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpecificationPath(Name alias, Table<SpecificationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpecificationPath as(String alias) {
            return new SpecificationPath(DSL.name(alias), this);
        }

        @Override
        public SpecificationPath as(Name alias) {
            return new SpecificationPath(alias, this);
        }

        @Override
        public SpecificationPath as(Table<?> alias) {
            return new SpecificationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SpecificationRecord, Long> getIdentity() {
        return (Identity<SpecificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpecificationRecord> getPrimaryKey() {
        return Keys.KEY_SPECIFICATION_PRIMARY;
    }

    @Override
    public List<ForeignKey<SpecificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSPECIFICAT686471, Keys.FKSPECIFICAT921973, Keys.FKSPECIFICAT839352);
    }

    private transient SpecificationTypePath _specificationType;

    /**
     * Get the implicit join path to the <code>oagi.specification_type</code>
     * table.
     */
    public SpecificationTypePath specificationType() {
        if (_specificationType == null)
            _specificationType = new SpecificationTypePath(this, Keys.FKSPECIFICAT686471, null);

        return _specificationType;
    }

    private transient SpecificationPath _specification;

    /**
     * Get the implicit join path to the <code>oagi.specification</code> table.
     */
    public SpecificationPath specification() {
        if (_specification == null)
            _specification = new SpecificationPath(this, Keys.FKSPECIFICAT921973, null);

        return _specification;
    }

    private transient SourcePath _source;

    /**
     * Get the implicit join path to the <code>oagi.source</code> table.
     */
    public SourcePath source() {
        if (_source == null)
            _source = new SourcePath(this, Keys.FKSPECIFICAT839352, null);

        return _source;
    }

    private transient SpecificationAggregateComponentPath _specificationAggregateComponent;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.specification_aggregate_component</code> table
     */
    public SpecificationAggregateComponentPath specificationAggregateComponent() {
        if (_specificationAggregateComponent == null)
            _specificationAggregateComponent = new SpecificationAggregateComponentPath(this, null, Keys.FKSPECIFICAT261745.getInverseKey());

        return _specificationAggregateComponent;
    }

    private transient SpecificationAssociationComponentPath _specificationAssociationComponent;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.specification_association_component</code> table
     */
    public SpecificationAssociationComponentPath specificationAssociationComponent() {
        if (_specificationAssociationComponent == null)
            _specificationAssociationComponent = new SpecificationAssociationComponentPath(this, null, Keys.FKSPECIFICAT293179.getInverseKey());

        return _specificationAssociationComponent;
    }

    private transient SpecificationBasicComponentPath _specificationBasicComponent;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.specification_basic_component</code> table
     */
    public SpecificationBasicComponentPath specificationBasicComponent() {
        if (_specificationBasicComponent == null)
            _specificationBasicComponent = new SpecificationBasicComponentPath(this, null, Keys.FKSPECIFICAT468600.getInverseKey());

        return _specificationBasicComponent;
    }

    private transient SpecificationDataTypePath _specificationDataType;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.specification_data_type</code> table
     */
    public SpecificationDataTypePath specificationDataType() {
        if (_specificationDataType == null)
            _specificationDataType = new SpecificationDataTypePath(this, null, Keys.FKSPECIFICAT57298.getInverseKey());

        return _specificationDataType;
    }

    private transient ReleasePath _release;

    /**
     * Get the implicit to-many join path to the <code>oagi.release</code> table
     */
    public ReleasePath release() {
        if (_release == null)
            _release = new ReleasePath(this, null, Keys.RELEASE_IBFK_1.getInverseKey());

        return _release;
    }

    @Override
    public Specification as(String alias) {
        return new Specification(DSL.name(alias), this);
    }

    @Override
    public Specification as(Name alias) {
        return new Specification(alias, this);
    }

    @Override
    public Specification as(Table<?> alias) {
        return new Specification(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Specification rename(String name) {
        return new Specification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Specification rename(Name name) {
        return new Specification(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Specification rename(Table<?> name) {
        return new Specification(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification where(Condition condition) {
        return new Specification(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Specification where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Specification where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Specification where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Specification where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Specification whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
