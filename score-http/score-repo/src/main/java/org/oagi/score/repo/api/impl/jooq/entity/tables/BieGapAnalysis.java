/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieGapAnalysisResults.BbieGapAnalysisResultsPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BieGapAnalysisRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BieGapAnalysis extends TableImpl<BieGapAnalysisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bie_gap_analysis</code>
     */
    public static final BieGapAnalysis BIE_GAP_ANALYSIS = new BieGapAnalysis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BieGapAnalysisRecord> getRecordType() {
        return BieGapAnalysisRecord.class;
    }

    /**
     * The column <code>oagi.bie_gap_analysis.gap_analysis_id</code>.
     */
    public final TableField<BieGapAnalysisRecord, Long> GAP_ANALYSIS_ID = createField(DSL.name("gap_analysis_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.bie_gap_analysis.source_top_level_asbiep_id</code>.
     */
    public final TableField<BieGapAnalysisRecord, Long> SOURCE_TOP_LEVEL_ASBIEP_ID = createField(DSL.name("source_top_level_asbiep_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.bie_gap_analysis.target_top_level_asbiep_id</code>.
     */
    public final TableField<BieGapAnalysisRecord, Long> TARGET_TOP_LEVEL_ASBIEP_ID = createField(DSL.name("target_top_level_asbiep_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BieGapAnalysis(Name alias, Table<BieGapAnalysisRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BieGapAnalysis(Name alias, Table<BieGapAnalysisRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bie_gap_analysis</code> table reference
     */
    public BieGapAnalysis(String alias) {
        this(DSL.name(alias), BIE_GAP_ANALYSIS);
    }

    /**
     * Create an aliased <code>oagi.bie_gap_analysis</code> table reference
     */
    public BieGapAnalysis(Name alias) {
        this(alias, BIE_GAP_ANALYSIS);
    }

    /**
     * Create a <code>oagi.bie_gap_analysis</code> table reference
     */
    public BieGapAnalysis() {
        this(DSL.name("bie_gap_analysis"), null);
    }

    public <O extends Record> BieGapAnalysis(Table<O> path, ForeignKey<O, BieGapAnalysisRecord> childPath, InverseForeignKey<O, BieGapAnalysisRecord> parentPath) {
        super(path, childPath, parentPath, BIE_GAP_ANALYSIS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BieGapAnalysisPath extends BieGapAnalysis implements Path<BieGapAnalysisRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BieGapAnalysisPath(Table<O> path, ForeignKey<O, BieGapAnalysisRecord> childPath, InverseForeignKey<O, BieGapAnalysisRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BieGapAnalysisPath(Name alias, Table<BieGapAnalysisRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BieGapAnalysisPath as(String alias) {
            return new BieGapAnalysisPath(DSL.name(alias), this);
        }

        @Override
        public BieGapAnalysisPath as(Name alias) {
            return new BieGapAnalysisPath(alias, this);
        }

        @Override
        public BieGapAnalysisPath as(Table<?> alias) {
            return new BieGapAnalysisPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BieGapAnalysisRecord, Long> getIdentity() {
        return (Identity<BieGapAnalysisRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BieGapAnalysisRecord> getPrimaryKey() {
        return Keys.KEY_BIE_GAP_ANALYSIS_PRIMARY;
    }

    private transient BbieGapAnalysisResultsPath _bbieGapAnalysisResults;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bbie_gap_analysis_results</code> table
     */
    public BbieGapAnalysisResultsPath bbieGapAnalysisResults() {
        if (_bbieGapAnalysisResults == null)
            _bbieGapAnalysisResults = new BbieGapAnalysisResultsPath(this, null, Keys.FKBBIE_GAP_A359170.getInverseKey());

        return _bbieGapAnalysisResults;
    }

    @Override
    public BieGapAnalysis as(String alias) {
        return new BieGapAnalysis(DSL.name(alias), this);
    }

    @Override
    public BieGapAnalysis as(Name alias) {
        return new BieGapAnalysis(alias, this);
    }

    @Override
    public BieGapAnalysis as(Table<?> alias) {
        return new BieGapAnalysis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysis rename(String name) {
        return new BieGapAnalysis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysis rename(Name name) {
        return new BieGapAnalysis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysis rename(Table<?> name) {
        return new BieGapAnalysis(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis where(Condition condition) {
        return new BieGapAnalysis(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysis where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysis where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysis where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysis where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysis whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
