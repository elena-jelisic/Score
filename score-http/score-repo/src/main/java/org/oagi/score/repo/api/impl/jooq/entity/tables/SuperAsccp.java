/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Asccp.AsccpPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SuperAcc.SuperAccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SuperAscc.SuperAsccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SuperAsccpRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SuperAsccp extends TableImpl<SuperAsccpRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.super_asccp</code>
     */
    public static final SuperAsccp SUPER_ASCCP = new SuperAsccp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuperAsccpRecord> getRecordType() {
        return SuperAsccpRecord.class;
    }

    /**
     * The column <code>oagi.super_asccp.super_asccp_id</code>.
     */
    public final TableField<SuperAsccpRecord, Long> SUPER_ASCCP_ID = createField(DSL.name("super_asccp_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.super_asccp.super_asccp_name</code>.
     */
    public final TableField<SuperAsccpRecord, String> SUPER_ASCCP_NAME = createField(DSL.name("super_asccp_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>oagi.super_asccp.asccp_role_of_super_acc_id</code>.
     */
    public final TableField<SuperAsccpRecord, Long> ASCCP_ROLE_OF_SUPER_ACC_ID = createField(DSL.name("asccp_role_of_super_acc_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SuperAsccp(Name alias, Table<SuperAsccpRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SuperAsccp(Name alias, Table<SuperAsccpRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.super_asccp</code> table reference
     */
    public SuperAsccp(String alias) {
        this(DSL.name(alias), SUPER_ASCCP);
    }

    /**
     * Create an aliased <code>oagi.super_asccp</code> table reference
     */
    public SuperAsccp(Name alias) {
        this(alias, SUPER_ASCCP);
    }

    /**
     * Create a <code>oagi.super_asccp</code> table reference
     */
    public SuperAsccp() {
        this(DSL.name("super_asccp"), null);
    }

    public <O extends Record> SuperAsccp(Table<O> path, ForeignKey<O, SuperAsccpRecord> childPath, InverseForeignKey<O, SuperAsccpRecord> parentPath) {
        super(path, childPath, parentPath, SUPER_ASCCP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SuperAsccpPath extends SuperAsccp implements Path<SuperAsccpRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SuperAsccpPath(Table<O> path, ForeignKey<O, SuperAsccpRecord> childPath, InverseForeignKey<O, SuperAsccpRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SuperAsccpPath(Name alias, Table<SuperAsccpRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SuperAsccpPath as(String alias) {
            return new SuperAsccpPath(DSL.name(alias), this);
        }

        @Override
        public SuperAsccpPath as(Name alias) {
            return new SuperAsccpPath(alias, this);
        }

        @Override
        public SuperAsccpPath as(Table<?> alias) {
            return new SuperAsccpPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SuperAsccpRecord, Long> getIdentity() {
        return (Identity<SuperAsccpRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SuperAsccpRecord> getPrimaryKey() {
        return Keys.KEY_SUPER_ASCCP_PRIMARY;
    }

    @Override
    public List<ForeignKey<SuperAsccpRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSUPER_ASCC560206);
    }

    private transient SuperAccPath _superAcc;

    /**
     * Get the implicit join path to the <code>oagi.super_acc</code> table.
     */
    public SuperAccPath superAcc() {
        if (_superAcc == null)
            _superAcc = new SuperAccPath(this, Keys.FKSUPER_ASCC560206, null);

        return _superAcc;
    }

    private transient AsccpPath _asccp;

    /**
     * Get the implicit to-many join path to the <code>oagi.asccp</code> table
     */
    public AsccpPath asccp() {
        if (_asccp == null)
            _asccp = new AsccpPath(this, null, Keys.ASCCP_IBFK_1.getInverseKey());

        return _asccp;
    }

    private transient SuperAsccPath _superAscc;

    /**
     * Get the implicit to-many join path to the <code>oagi.super_ascc</code>
     * table
     */
    public SuperAsccPath superAscc() {
        if (_superAscc == null)
            _superAscc = new SuperAsccPath(this, null, Keys.FKSUPER_ASCC367658.getInverseKey());

        return _superAscc;
    }

    @Override
    public SuperAsccp as(String alias) {
        return new SuperAsccp(DSL.name(alias), this);
    }

    @Override
    public SuperAsccp as(Name alias) {
        return new SuperAsccp(alias, this);
    }

    @Override
    public SuperAsccp as(Table<?> alias) {
        return new SuperAsccp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperAsccp rename(String name) {
        return new SuperAsccp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperAsccp rename(Name name) {
        return new SuperAsccp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperAsccp rename(Table<?> name) {
        return new SuperAsccp(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp where(Condition condition) {
        return new SuperAsccp(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperAsccp where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperAsccp where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperAsccp where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperAsccp where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperAsccp whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
