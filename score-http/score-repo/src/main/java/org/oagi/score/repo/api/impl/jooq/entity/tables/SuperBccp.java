/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bccp.BccpPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SuperBcc.SuperBccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SuperBccpRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SuperBccp extends TableImpl<SuperBccpRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.super_bccp</code>
     */
    public static final SuperBccp SUPER_BCCP = new SuperBccp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuperBccpRecord> getRecordType() {
        return SuperBccpRecord.class;
    }

    /**
     * The column <code>oagi.super_bccp.super_bccp_id</code>.
     */
    public final TableField<SuperBccpRecord, Long> SUPER_BCCP_ID = createField(DSL.name("super_bccp_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.super_bccp.super_bccp_name</code>.
     */
    public final TableField<SuperBccpRecord, String> SUPER_BCCP_NAME = createField(DSL.name("super_bccp_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private SuperBccp(Name alias, Table<SuperBccpRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SuperBccp(Name alias, Table<SuperBccpRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.super_bccp</code> table reference
     */
    public SuperBccp(String alias) {
        this(DSL.name(alias), SUPER_BCCP);
    }

    /**
     * Create an aliased <code>oagi.super_bccp</code> table reference
     */
    public SuperBccp(Name alias) {
        this(alias, SUPER_BCCP);
    }

    /**
     * Create a <code>oagi.super_bccp</code> table reference
     */
    public SuperBccp() {
        this(DSL.name("super_bccp"), null);
    }

    public <O extends Record> SuperBccp(Table<O> path, ForeignKey<O, SuperBccpRecord> childPath, InverseForeignKey<O, SuperBccpRecord> parentPath) {
        super(path, childPath, parentPath, SUPER_BCCP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SuperBccpPath extends SuperBccp implements Path<SuperBccpRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SuperBccpPath(Table<O> path, ForeignKey<O, SuperBccpRecord> childPath, InverseForeignKey<O, SuperBccpRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SuperBccpPath(Name alias, Table<SuperBccpRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SuperBccpPath as(String alias) {
            return new SuperBccpPath(DSL.name(alias), this);
        }

        @Override
        public SuperBccpPath as(Name alias) {
            return new SuperBccpPath(alias, this);
        }

        @Override
        public SuperBccpPath as(Table<?> alias) {
            return new SuperBccpPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SuperBccpRecord, Long> getIdentity() {
        return (Identity<SuperBccpRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SuperBccpRecord> getPrimaryKey() {
        return Keys.KEY_SUPER_BCCP_PRIMARY;
    }

    private transient BccpPath _bccp;

    /**
     * Get the implicit to-many join path to the <code>oagi.bccp</code> table
     */
    public BccpPath bccp() {
        if (_bccp == null)
            _bccp = new BccpPath(this, null, Keys.BCCP_IBFK_1.getInverseKey());

        return _bccp;
    }

    private transient SuperBccPath _superBcc;

    /**
     * Get the implicit to-many join path to the <code>oagi.super_bcc</code>
     * table
     */
    public SuperBccPath superBcc() {
        if (_superBcc == null)
            _superBcc = new SuperBccPath(this, null, Keys.FKSUPER_BCC951485.getInverseKey());

        return _superBcc;
    }

    @Override
    public SuperBccp as(String alias) {
        return new SuperBccp(DSL.name(alias), this);
    }

    @Override
    public SuperBccp as(Name alias) {
        return new SuperBccp(alias, this);
    }

    @Override
    public SuperBccp as(Table<?> alias) {
        return new SuperBccp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBccp rename(String name) {
        return new SuperBccp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBccp rename(Name name) {
        return new SuperBccp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBccp rename(Table<?> name) {
        return new SuperBccp(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp where(Condition condition) {
        return new SuperBccp(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBccp where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBccp where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBccp where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBccp where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBccp whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
