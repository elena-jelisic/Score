/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieGapAnalysis.BieGapAnalysisPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieGapAnalysisConstraintsResult.BieGapAnalysisConstraintsResultPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BieGapAnalysisStatusCode.BieGapAnalysisStatusCodePath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.MappingSpecification.MappingSpecificationPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BbieGapAnalysisResultsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BbieGapAnalysisResults extends TableImpl<BbieGapAnalysisResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bbie_gap_analysis_results</code>
     */
    public static final BbieGapAnalysisResults BBIE_GAP_ANALYSIS_RESULTS = new BbieGapAnalysisResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BbieGapAnalysisResultsRecord> getRecordType() {
        return BbieGapAnalysisResultsRecord.class;
    }

    /**
     * The column <code>oagi.bbie_gap_analysis_results.result_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> RESULT_ID = createField(DSL.name("result_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>oagi.bbie_gap_analysis_results.from_gap_analysis_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> FROM_GAP_ANALYSIS_ID = createField(DSL.name("from_gap_analysis_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.bbie_gap_analysis_results.source_bbie_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> SOURCE_BBIE_ID = createField(DSL.name("source_bbie_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>oagi.bbie_gap_analysis_results.target_bbie_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> TARGET_BBIE_ID = createField(DSL.name("target_bbie_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>oagi.bbie_gap_analysis_results.status_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>oagi.bbie_gap_analysis_results.constraint_analysis_result</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> CONSTRAINT_ANALYSIS_RESULT = createField(DSL.name("constraint_analysis_result"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column
     * <code>oagi.bbie_gap_analysis_results.mapping_specification_id</code>.
     */
    public final TableField<BbieGapAnalysisResultsRecord, Long> MAPPING_SPECIFICATION_ID = createField(DSL.name("mapping_specification_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private BbieGapAnalysisResults(Name alias, Table<BbieGapAnalysisResultsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BbieGapAnalysisResults(Name alias, Table<BbieGapAnalysisResultsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bbie_gap_analysis_results</code> table
     * reference
     */
    public BbieGapAnalysisResults(String alias) {
        this(DSL.name(alias), BBIE_GAP_ANALYSIS_RESULTS);
    }

    /**
     * Create an aliased <code>oagi.bbie_gap_analysis_results</code> table
     * reference
     */
    public BbieGapAnalysisResults(Name alias) {
        this(alias, BBIE_GAP_ANALYSIS_RESULTS);
    }

    /**
     * Create a <code>oagi.bbie_gap_analysis_results</code> table reference
     */
    public BbieGapAnalysisResults() {
        this(DSL.name("bbie_gap_analysis_results"), null);
    }

    public <O extends Record> BbieGapAnalysisResults(Table<O> path, ForeignKey<O, BbieGapAnalysisResultsRecord> childPath, InverseForeignKey<O, BbieGapAnalysisResultsRecord> parentPath) {
        super(path, childPath, parentPath, BBIE_GAP_ANALYSIS_RESULTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BbieGapAnalysisResultsPath extends BbieGapAnalysisResults implements Path<BbieGapAnalysisResultsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BbieGapAnalysisResultsPath(Table<O> path, ForeignKey<O, BbieGapAnalysisResultsRecord> childPath, InverseForeignKey<O, BbieGapAnalysisResultsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BbieGapAnalysisResultsPath(Name alias, Table<BbieGapAnalysisResultsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BbieGapAnalysisResultsPath as(String alias) {
            return new BbieGapAnalysisResultsPath(DSL.name(alias), this);
        }

        @Override
        public BbieGapAnalysisResultsPath as(Name alias) {
            return new BbieGapAnalysisResultsPath(alias, this);
        }

        @Override
        public BbieGapAnalysisResultsPath as(Table<?> alias) {
            return new BbieGapAnalysisResultsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BbieGapAnalysisResultsRecord, Long> getIdentity() {
        return (Identity<BbieGapAnalysisResultsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BbieGapAnalysisResultsRecord> getPrimaryKey() {
        return Keys.KEY_BBIE_GAP_ANALYSIS_RESULTS_PRIMARY;
    }

    @Override
    public List<ForeignKey<BbieGapAnalysisResultsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKBBIE_GAP_A359170, Keys.FKBBIE_GAP_A61112, Keys.FKBBIE_GAP_A910350, Keys.FKBBIE_GAP_A747300);
    }

    private transient BieGapAnalysisPath _bieGapAnalysis;

    /**
     * Get the implicit join path to the <code>oagi.bie_gap_analysis</code>
     * table.
     */
    public BieGapAnalysisPath bieGapAnalysis() {
        if (_bieGapAnalysis == null)
            _bieGapAnalysis = new BieGapAnalysisPath(this, Keys.FKBBIE_GAP_A359170, null);

        return _bieGapAnalysis;
    }

    private transient BieGapAnalysisStatusCodePath _bieGapAnalysisStatusCode;

    /**
     * Get the implicit join path to the
     * <code>oagi.bie_gap_analysis_status_code</code> table.
     */
    public BieGapAnalysisStatusCodePath bieGapAnalysisStatusCode() {
        if (_bieGapAnalysisStatusCode == null)
            _bieGapAnalysisStatusCode = new BieGapAnalysisStatusCodePath(this, Keys.FKBBIE_GAP_A61112, null);

        return _bieGapAnalysisStatusCode;
    }

    private transient BieGapAnalysisConstraintsResultPath _bieGapAnalysisConstraintsResult;

    /**
     * Get the implicit join path to the
     * <code>oagi.bie_gap_analysis_constraints_result</code> table.
     */
    public BieGapAnalysisConstraintsResultPath bieGapAnalysisConstraintsResult() {
        if (_bieGapAnalysisConstraintsResult == null)
            _bieGapAnalysisConstraintsResult = new BieGapAnalysisConstraintsResultPath(this, Keys.FKBBIE_GAP_A910350, null);

        return _bieGapAnalysisConstraintsResult;
    }

    private transient MappingSpecificationPath _mappingSpecification;

    /**
     * Get the implicit join path to the <code>oagi.mapping_specification</code>
     * table.
     */
    public MappingSpecificationPath mappingSpecification() {
        if (_mappingSpecification == null)
            _mappingSpecification = new MappingSpecificationPath(this, Keys.FKBBIE_GAP_A747300, null);

        return _mappingSpecification;
    }

    @Override
    public BbieGapAnalysisResults as(String alias) {
        return new BbieGapAnalysisResults(DSL.name(alias), this);
    }

    @Override
    public BbieGapAnalysisResults as(Name alias) {
        return new BbieGapAnalysisResults(alias, this);
    }

    @Override
    public BbieGapAnalysisResults as(Table<?> alias) {
        return new BbieGapAnalysisResults(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BbieGapAnalysisResults rename(String name) {
        return new BbieGapAnalysisResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BbieGapAnalysisResults rename(Name name) {
        return new BbieGapAnalysisResults(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BbieGapAnalysisResults rename(Table<?> name) {
        return new BbieGapAnalysisResults(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults where(Condition condition) {
        return new BbieGapAnalysisResults(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BbieGapAnalysisResults where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BbieGapAnalysisResults where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BbieGapAnalysisResults where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BbieGapAnalysisResults where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BbieGapAnalysisResults whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
