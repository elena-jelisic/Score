/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.FlatBccViewRecord;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlatBccView extends TableImpl<FlatBccViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.flat_bcc_view</code>
     */
    public static final FlatBccView FLAT_BCC_VIEW = new FlatBccView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FlatBccViewRecord> getRecordType() {
        return FlatBccViewRecord.class;
    }

    /**
     * The column <code>oagi.flat_bcc_view.object_class_term</code>. Object
     * class name of the ACC concept. For OAGIS, this is generally name of a
     * type with the "Type" truncated from the end. Per CCS the name is space
     * separated. "ID" is expanded to "Identifier".
     */
    public final TableField<FlatBccViewRecord, String> OBJECT_CLASS_TERM = createField(DSL.name("object_class_term"), SQLDataType.VARCHAR(100).nullable(false), this, "Object class name of the ACC concept. For OAGIS, this is generally name of a type with the \"Type\" truncated from the end. Per CCS the name is space separated. \"ID\" is expanded to \"Identifier\".");

    /**
     * The column <code>oagi.flat_bcc_view.bcc_id</code>. A internal, primary
     * database key of an BCC.
     */
    public final TableField<FlatBccViewRecord, ULong> BCC_ID = createField(DSL.name("bcc_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINTUNSIGNED)), this, "A internal, primary database key of an BCC.");

    /**
     * The column <code>oagi.flat_bcc_view.dt_sc_id</code>. Internal, primary
     * database key.
     */
    public final TableField<FlatBccViewRecord, ULong> DT_SC_ID = createField(DSL.name("dt_sc_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINTUNSIGNED)), this, "Internal, primary database key.");

    /**
     * The column <code>oagi.flat_bcc_view.property_term</code>. The property
     * concept that the BCCP models.
     */
    public final TableField<FlatBccViewRecord, String> PROPERTY_TERM = createField(DSL.name("property_term"), SQLDataType.VARCHAR(100).nullable(false), this, "The property concept that the BCCP models.");

    /**
     * The column <code>oagi.flat_bcc_view.dt_sc_den</code>.
     */
    public final TableField<FlatBccViewRecord, String> DT_SC_DEN = createField(DSL.name("dt_sc_den"), SQLDataType.VARCHAR(144).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>oagi.flat_bcc_view.super_bcc_id</code>.
     */
    public final TableField<FlatBccViewRecord, Long> SUPER_BCC_ID = createField(DSL.name("super_bcc_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    private FlatBccView(Name alias, Table<FlatBccViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FlatBccView(Name alias, Table<FlatBccViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `flat_bcc_view` as select `oagi`.`acc`.`object_class_term` AS `object_class_term`,`oagi`.`bcc`.`bcc_id` AS `bcc_id`,`oagi`.`dt_sc`.`dt_sc_id` AS `dt_sc_id`,`oagi`.`bccp`.`property_term` AS `property_term`,concat(concat(concat(concat(`oagi`.`dt_sc`.`object_class_term`,'. '),`oagi`.`dt_sc`.`property_term`),'. '),`oagi`.`dt_sc`.`representation_term`) AS `dt_sc_den`,`fb`.`super_bcc_id` AS `super_bcc_id` from ((((`oagi`.`flat_bcc` `fb` join `oagi`.`acc` on(`oagi`.`acc`.`acc_id` = `fb`.`acc_id`)) join `oagi`.`bcc` on(`fb`.`bcc_id` = `oagi`.`bcc`.`bcc_id`)) join `oagi`.`bccp` on(`oagi`.`bcc`.`to_bccp_id` = `oagi`.`bccp`.`bccp_id`)) left join `oagi`.`dt_sc` on(`fb`.`dt_sc_id` = `oagi`.`dt_sc`.`dt_sc_id`)) order by `oagi`.`acc`.`object_class_term`,`oagi`.`bccp`.`property_term`,concat(concat(concat(concat(`oagi`.`dt_sc`.`object_class_term`,'. '),`oagi`.`dt_sc`.`property_term`),'. '),`oagi`.`dt_sc`.`representation_term`)"), where);
    }

    /**
     * Create an aliased <code>oagi.flat_bcc_view</code> table reference
     */
    public FlatBccView(String alias) {
        this(DSL.name(alias), FLAT_BCC_VIEW);
    }

    /**
     * Create an aliased <code>oagi.flat_bcc_view</code> table reference
     */
    public FlatBccView(Name alias) {
        this(alias, FLAT_BCC_VIEW);
    }

    /**
     * Create a <code>oagi.flat_bcc_view</code> table reference
     */
    public FlatBccView() {
        this(DSL.name("flat_bcc_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public FlatBccView as(String alias) {
        return new FlatBccView(DSL.name(alias), this);
    }

    @Override
    public FlatBccView as(Name alias) {
        return new FlatBccView(alias, this);
    }

    @Override
    public FlatBccView as(Table<?> alias) {
        return new FlatBccView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView rename(String name) {
        return new FlatBccView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView rename(Name name) {
        return new FlatBccView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FlatBccView rename(Table<?> name) {
        return new FlatBccView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView where(Condition condition) {
        return new FlatBccView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FlatBccView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FlatBccView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
