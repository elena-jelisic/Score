/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Specification.SpecificationPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SourceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Source extends TableImpl<SourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.source</code>
     */
    public static final Source SOURCE = new Source();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourceRecord> getRecordType() {
        return SourceRecord.class;
    }

    /**
     * The column <code>oagi.source.source_id</code>.
     */
    public final TableField<SourceRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.source.source_name</code>.
     */
    public final TableField<SourceRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Source(Name alias, Table<SourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Source(Name alias, Table<SourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.source</code> table reference
     */
    public Source(String alias) {
        this(DSL.name(alias), SOURCE);
    }

    /**
     * Create an aliased <code>oagi.source</code> table reference
     */
    public Source(Name alias) {
        this(alias, SOURCE);
    }

    /**
     * Create a <code>oagi.source</code> table reference
     */
    public Source() {
        this(DSL.name("source"), null);
    }

    public <O extends Record> Source(Table<O> path, ForeignKey<O, SourceRecord> childPath, InverseForeignKey<O, SourceRecord> parentPath) {
        super(path, childPath, parentPath, SOURCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SourcePath extends Source implements Path<SourceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SourcePath(Table<O> path, ForeignKey<O, SourceRecord> childPath, InverseForeignKey<O, SourceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SourcePath(Name alias, Table<SourceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SourcePath as(String alias) {
            return new SourcePath(DSL.name(alias), this);
        }

        @Override
        public SourcePath as(Name alias) {
            return new SourcePath(alias, this);
        }

        @Override
        public SourcePath as(Table<?> alias) {
            return new SourcePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SourceRecord, Long> getIdentity() {
        return (Identity<SourceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SourceRecord> getPrimaryKey() {
        return Keys.KEY_SOURCE_PRIMARY;
    }

    private transient SpecificationPath _specification;

    /**
     * Get the implicit to-many join path to the <code>oagi.specification</code>
     * table
     */
    public SpecificationPath specification() {
        if (_specification == null)
            _specification = new SpecificationPath(this, null, Keys.FKSPECIFICAT839352.getInverseKey());

        return _specification;
    }

    @Override
    public Source as(String alias) {
        return new Source(DSL.name(alias), this);
    }

    @Override
    public Source as(Name alias) {
        return new Source(alias, this);
    }

    @Override
    public Source as(Table<?> alias) {
        return new Source(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Source rename(String name) {
        return new Source(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Source rename(Name name) {
        return new Source(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Source rename(Table<?> name) {
        return new Source(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source where(Condition condition) {
        return new Source(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Source where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Source where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Source where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Source where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Source whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
