/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.BbieGapAnalysisResults.BbieGapAnalysisResultsPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.BieGapAnalysisStatusCodeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BieGapAnalysisStatusCode extends TableImpl<BieGapAnalysisStatusCodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.bie_gap_analysis_status_code</code>
     */
    public static final BieGapAnalysisStatusCode BIE_GAP_ANALYSIS_STATUS_CODE = new BieGapAnalysisStatusCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BieGapAnalysisStatusCodeRecord> getRecordType() {
        return BieGapAnalysisStatusCodeRecord.class;
    }

    /**
     * The column <code>oagi.bie_gap_analysis_status_code.status_id</code>.
     */
    public final TableField<BieGapAnalysisStatusCodeRecord, Long> STATUS_ID = createField(DSL.name("status_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.bie_gap_analysis_status_code.code</code>.
     */
    public final TableField<BieGapAnalysisStatusCodeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private BieGapAnalysisStatusCode(Name alias, Table<BieGapAnalysisStatusCodeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BieGapAnalysisStatusCode(Name alias, Table<BieGapAnalysisStatusCodeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.bie_gap_analysis_status_code</code> table
     * reference
     */
    public BieGapAnalysisStatusCode(String alias) {
        this(DSL.name(alias), BIE_GAP_ANALYSIS_STATUS_CODE);
    }

    /**
     * Create an aliased <code>oagi.bie_gap_analysis_status_code</code> table
     * reference
     */
    public BieGapAnalysisStatusCode(Name alias) {
        this(alias, BIE_GAP_ANALYSIS_STATUS_CODE);
    }

    /**
     * Create a <code>oagi.bie_gap_analysis_status_code</code> table reference
     */
    public BieGapAnalysisStatusCode() {
        this(DSL.name("bie_gap_analysis_status_code"), null);
    }

    public <O extends Record> BieGapAnalysisStatusCode(Table<O> path, ForeignKey<O, BieGapAnalysisStatusCodeRecord> childPath, InverseForeignKey<O, BieGapAnalysisStatusCodeRecord> parentPath) {
        super(path, childPath, parentPath, BIE_GAP_ANALYSIS_STATUS_CODE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BieGapAnalysisStatusCodePath extends BieGapAnalysisStatusCode implements Path<BieGapAnalysisStatusCodeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BieGapAnalysisStatusCodePath(Table<O> path, ForeignKey<O, BieGapAnalysisStatusCodeRecord> childPath, InverseForeignKey<O, BieGapAnalysisStatusCodeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BieGapAnalysisStatusCodePath(Name alias, Table<BieGapAnalysisStatusCodeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BieGapAnalysisStatusCodePath as(String alias) {
            return new BieGapAnalysisStatusCodePath(DSL.name(alias), this);
        }

        @Override
        public BieGapAnalysisStatusCodePath as(Name alias) {
            return new BieGapAnalysisStatusCodePath(alias, this);
        }

        @Override
        public BieGapAnalysisStatusCodePath as(Table<?> alias) {
            return new BieGapAnalysisStatusCodePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<BieGapAnalysisStatusCodeRecord, Long> getIdentity() {
        return (Identity<BieGapAnalysisStatusCodeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BieGapAnalysisStatusCodeRecord> getPrimaryKey() {
        return Keys.KEY_BIE_GAP_ANALYSIS_STATUS_CODE_PRIMARY;
    }

    private transient BbieGapAnalysisResultsPath _bbieGapAnalysisResults;

    /**
     * Get the implicit to-many join path to the
     * <code>oagi.bbie_gap_analysis_results</code> table
     */
    public BbieGapAnalysisResultsPath bbieGapAnalysisResults() {
        if (_bbieGapAnalysisResults == null)
            _bbieGapAnalysisResults = new BbieGapAnalysisResultsPath(this, null, Keys.FKBBIE_GAP_A61112.getInverseKey());

        return _bbieGapAnalysisResults;
    }

    @Override
    public BieGapAnalysisStatusCode as(String alias) {
        return new BieGapAnalysisStatusCode(DSL.name(alias), this);
    }

    @Override
    public BieGapAnalysisStatusCode as(Name alias) {
        return new BieGapAnalysisStatusCode(alias, this);
    }

    @Override
    public BieGapAnalysisStatusCode as(Table<?> alias) {
        return new BieGapAnalysisStatusCode(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysisStatusCode rename(String name) {
        return new BieGapAnalysisStatusCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysisStatusCode rename(Name name) {
        return new BieGapAnalysisStatusCode(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BieGapAnalysisStatusCode rename(Table<?> name) {
        return new BieGapAnalysisStatusCode(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode where(Condition condition) {
        return new BieGapAnalysisStatusCode(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysisStatusCode where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysisStatusCode where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysisStatusCode where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BieGapAnalysisStatusCode where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BieGapAnalysisStatusCode whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
