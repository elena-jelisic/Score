/*
 * This file is generated by jOOQ.
 */
package org.oagi.score.repo.api.impl.jooq.entity.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.oagi.score.repo.api.impl.jooq.entity.Keys;
import org.oagi.score.repo.api.impl.jooq.entity.Oagi;
import org.oagi.score.repo.api.impl.jooq.entity.tables.Bcc.BccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.FlatBcc.FlatBccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SuperAcc.SuperAccPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.SuperBccp.SuperBccpPath;
import org.oagi.score.repo.api.impl.jooq.entity.tables.records.SuperBccRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SuperBcc extends TableImpl<SuperBccRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>oagi.super_bcc</code>
     */
    public static final SuperBcc SUPER_BCC = new SuperBcc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SuperBccRecord> getRecordType() {
        return SuperBccRecord.class;
    }

    /**
     * The column <code>oagi.super_bcc.super_bcc_id</code>.
     */
    public final TableField<SuperBccRecord, Long> SUPER_BCC_ID = createField(DSL.name("super_bcc_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>oagi.super_bcc.super_bcc_name</code>.
     */
    public final TableField<SuperBccRecord, String> SUPER_BCC_NAME = createField(DSL.name("super_bcc_name"), SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>oagi.super_bcc.min_cardinality</code>.
     */
    public final TableField<SuperBccRecord, Integer> MIN_CARDINALITY = createField(DSL.name("min_cardinality"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>oagi.super_bcc.max_cardinality</code>.
     */
    public final TableField<SuperBccRecord, Integer> MAX_CARDINALITY = createField(DSL.name("max_cardinality"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>oagi.super_bcc.from_super_acc_id</code>.
     */
    public final TableField<SuperBccRecord, Long> FROM_SUPER_ACC_ID = createField(DSL.name("from_super_acc_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>oagi.super_bcc.super_bccp_id</code>.
     */
    public final TableField<SuperBccRecord, Long> SUPER_BCCP_ID = createField(DSL.name("super_bccp_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SuperBcc(Name alias, Table<SuperBccRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SuperBcc(Name alias, Table<SuperBccRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>oagi.super_bcc</code> table reference
     */
    public SuperBcc(String alias) {
        this(DSL.name(alias), SUPER_BCC);
    }

    /**
     * Create an aliased <code>oagi.super_bcc</code> table reference
     */
    public SuperBcc(Name alias) {
        this(alias, SUPER_BCC);
    }

    /**
     * Create a <code>oagi.super_bcc</code> table reference
     */
    public SuperBcc() {
        this(DSL.name("super_bcc"), null);
    }

    public <O extends Record> SuperBcc(Table<O> path, ForeignKey<O, SuperBccRecord> childPath, InverseForeignKey<O, SuperBccRecord> parentPath) {
        super(path, childPath, parentPath, SUPER_BCC);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SuperBccPath extends SuperBcc implements Path<SuperBccRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SuperBccPath(Table<O> path, ForeignKey<O, SuperBccRecord> childPath, InverseForeignKey<O, SuperBccRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SuperBccPath(Name alias, Table<SuperBccRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SuperBccPath as(String alias) {
            return new SuperBccPath(DSL.name(alias), this);
        }

        @Override
        public SuperBccPath as(Name alias) {
            return new SuperBccPath(alias, this);
        }

        @Override
        public SuperBccPath as(Table<?> alias) {
            return new SuperBccPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Oagi.OAGI;
    }

    @Override
    public Identity<SuperBccRecord, Long> getIdentity() {
        return (Identity<SuperBccRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SuperBccRecord> getPrimaryKey() {
        return Keys.KEY_SUPER_BCC_PRIMARY;
    }

    @Override
    public List<ForeignKey<SuperBccRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSUPER_BCC759875, Keys.FKSUPER_BCC951485);
    }

    private transient SuperAccPath _superAcc;

    /**
     * Get the implicit join path to the <code>oagi.super_acc</code> table.
     */
    public SuperAccPath superAcc() {
        if (_superAcc == null)
            _superAcc = new SuperAccPath(this, Keys.FKSUPER_BCC759875, null);

        return _superAcc;
    }

    private transient SuperBccpPath _superBccp;

    /**
     * Get the implicit join path to the <code>oagi.super_bccp</code> table.
     */
    public SuperBccpPath superBccp() {
        if (_superBccp == null)
            _superBccp = new SuperBccpPath(this, Keys.FKSUPER_BCC951485, null);

        return _superBccp;
    }

    private transient BccPath _bcc;

    /**
     * Get the implicit to-many join path to the <code>oagi.bcc</code> table
     */
    public BccPath bcc() {
        if (_bcc == null)
            _bcc = new BccPath(this, null, Keys.BCC_IBFK_1.getInverseKey());

        return _bcc;
    }

    private transient FlatBccPath _flatBcc;

    /**
     * Get the implicit to-many join path to the <code>oagi.flat_bcc</code>
     * table
     */
    public FlatBccPath flatBcc() {
        if (_flatBcc == null)
            _flatBcc = new FlatBccPath(this, null, Keys.FKFLAT_BCC254537.getInverseKey());

        return _flatBcc;
    }

    @Override
    public SuperBcc as(String alias) {
        return new SuperBcc(DSL.name(alias), this);
    }

    @Override
    public SuperBcc as(Name alias) {
        return new SuperBcc(alias, this);
    }

    @Override
    public SuperBcc as(Table<?> alias) {
        return new SuperBcc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBcc rename(String name) {
        return new SuperBcc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBcc rename(Name name) {
        return new SuperBcc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SuperBcc rename(Table<?> name) {
        return new SuperBcc(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc where(Condition condition) {
        return new SuperBcc(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBcc where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBcc where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBcc where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SuperBcc where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SuperBcc whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
